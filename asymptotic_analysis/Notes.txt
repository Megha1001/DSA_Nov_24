Asymptotic Ananlysis
----------------------
-> The idea is to measure order of growth. (We meaure order of growth of time taken by a functional program, in terms of input size.)
-> Doesn't depend upon machine, programming language etc.
-> No need to implement, we can analyze algorithm.

Assumptions
------------
-> Mathematical operations like addition, substraction, division, multiplication etc taken same time (whether you add 1+1 or 10000000+100000000, its consider to take same time)


Direct way to find and compare growths
------------------------------------------
- Ignore lower order terms
- Ignore leading term constant

How to compare terms ?
-----------------------
c < logLogN < logN < N^1/3 < N^1/2 < N < N^2 < N^3 < N^4 < 2^N < N^N

------------
The algorithm whose Order of growth is higher is bad algorithm
------------

Asymptotic Notation
--------------------
Big O : Exact or Upper
Theta : Exact
Omega : Exact or lower

------
When we know exact order of growth use Theta notation not Big O

------

Recursion Tree Method for solving reccurrences
- We consider the recursion tree and compute total work done.
- We write non recursive part as root of the tree and write the recursive part as children
- We keep expanding until we see a pattern

-------

Space complexity 
- Order of growth of memory ( or RAM) space in terms of input size

Auxiliary Space
- Order of growth of extra space or temporary space in terms of input size.