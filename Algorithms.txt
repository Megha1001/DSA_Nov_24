Euclidean Algorithm
---------------------
1. Let 'b' be smaller than 'a'
     gcd(a, b) = gcd(a-b, b)

why ? 
    Let 'g' e GCD of 'a' and 'b'
    a = gx , b = gy and GCD(x, y) = 1
    (a-b) = g(x-y) ==> GCD of 1-b has be to 'g' otherwise it must have some common factor b/w x, y that contradicts GCD(x, y)=1
    Hence 
    gcd(a, b) = gcd(a-b, b) => g

Optimized euclidean algorith --> Time Complexity : O(log(min(a,b)))
Given number -> a,b
    if(b==0) return a;

    return gcd(b, a%b)


--------
LCM Algo
LCM is the smallest number that divides both the numbers.
a*b = LCM(a, b) * gcd(a, b)
---------

Prime number : Number that are only divisible by 1 and itself
Note : 1 is not the prime number ( nor composite number(non prime are termed as composite))
2 is the only even prime number


Idea : Divisors always appears in pair

30 -> (1,30) , (2, 15), (3,10), (5, 6)

=> if (x,y) is a pair
    x*y = n 
    and if x<=y
    x*x <=n
    => x <= Sqrt(n)

- Sieve of Eratosthenes

-----------------
Computing power

power(x,n) = power(x,n/2)*power(x,n/2), if n is even
power(x, n) = power(x,n/2)*power(x,n/2) * x, if n is odd


-------
Brain and Kerningham Algorithm
- used for counting number of set bits in a number (For example : 40:101000, ans=2). This is the algorith that run only 2 times(Number of set bits times).

Simple Method
int countSetBits(int n){
    int res=0;

    while(n>0){
        int n = n&(n-1); //This expression makes the last set bit as 0
        res = res+1;
    }
    return res;
}

------------
Lookup table solution
-> To count number of set bits in given number in O(1)time. This involves preprocessing.