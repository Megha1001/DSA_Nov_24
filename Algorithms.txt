Euclidean Algorithm
---------------------
1. Let 'b' be smaller than 'a'
     gcd(a, b) = gcd(a-b, b)

why ? 
    Let 'g' e GCD of 'a' and 'b'
    a = gx , b = gy and GCD(x, y) = 1
    (a-b) = g(x-y) ==> GCD of 1-b has be to 'g' otherwise it must have some common factor b/w x, y that contradicts GCD(x, y)=1
    Hence 
    gcd(a, b) = gcd(a-b, b) => g

Optimized euclidean algorith --> Time Complexity : O(log(min(a,b)))
Given number -> a,b
    if(b==0) return a;

    return gcd(b, a%b)


--------
LCM Algo
LCM is the smallest number that divides both the numbers.
a*b = LCM(a, b) * gcd(a, b)
---------

Prime number : Number that are only divisible by 1 and itself
Note : 1 is not the prime number ( nor composite number(non prime are termed as composite))
2 is the only even prime number


Idea : Divisors always appears in pair

30 -> (1,30) , (2, 15), (3,10), (5, 6)

=> if (x,y) is a pair
    x*y = n 
    and if x<=y
    x*x <=n
    => x <= Sqrt(n)

- Sieve of Eratosthenes

-----------------
Computing power

power(x,n) = power(x,n/2)*power(x,n/2), if n is even
power(x, n) = power(x,n/2)*power(x,n/2) * x, if n is odd


-------
Brain and Kerningham Algorithm
- used for counting number of set bits in a number (For example : 40:101000, ans=2). This is the algorith that run only 2 times(Number of set bits times).

Simple Method
int countSetBits(int n){
    int res=0;

    while(n>0){
        int n = n&(n-1); //This expression makes the last set bit as 0
        res = res+1;
    }
    return res;
}

------------
Lookup table solution
-> To count number of set bits in given number in O(1)time. This involves preprocessing.

Steps
Assumption  : We have 32 bit number
-> Precompute count for 8 bit number(0to 255)
 tbl[0] = 0
 for i=1 to 255
    tbl[i] = tbl[i&(i-1)] +1;


Explanation : 
- tbl[i] holds the number of set bit in i then
    - tbl[i&(i-1)], given the count of set bits in the number formed after removing the least significant 1. (basically finding number of set bits in number after removing least set bit from current number)
    - So by adding 1 to this count , we get the total number of set bits in i:
        tbl[i] = tbl[i&(i-1)]+1


-> Now to count set bits in given number n , make batches of 8 and count

How do you dount set bits in the 4 segments invidully using tbl

-----------------
Interesting properties of XOR(^)
-> x ^ x = 0
-> x ^ y = y ^ x (associative)
-> x ^ (y ^ z) = (x ^ y) ^ z (commutative)

x ^ x ^ x ....... ^x --> Even times = 0
x ^ x ^ x ....... ^x --> Odd times = x

------------
To find the number where only the least set bit is set from the number
OR
Find a number which has only 1 bit set and the set bit corresponds to last set bit of x

FORMULA : x & (~(x-1)) // used in two odd occurring finding question


------
LEFT Rotate by n position
logic
    -> reverse(arr, 0,d-1);
    -> reverse(arr, d,n-1);
    -> reverse(arr, 0,n-1);

------
Kadane's algo â€“ O(n) Time and O(1) Space
The idea of Kadane's algo is to traverse the array from left to right and for each element, find the maximum sum among all 
subarrays ending at that element. The result will be maximum of all thsee values/

Code